// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        buildToolsVersion = "28.0.3"
        minSdkVersion = 19
        compileSdkVersion = 28
        targetSdkVersion = 28
        supportLibVersion = "28.0.0"
    }
    repositories {
        google()
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("com.android.tools.build:gradle:3.4.1")

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    task downloadDependencies() {
        description 'Download all dependencies to the Gradle cache'
        doLast {
        configurations.findAll().each { config ->
                if (config.name.contains("minReactNative") && config.canBeResolved) {
                print config.name
                print '\n'
                config.files
                }
            }
        }
    }

    println "${project.name} ${projectDir} ${rootDir}"

    repositories {
        google()
        jcenter()
        mavenCentral()
        mavenLocal()
        maven {
            // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
            url("$rootDir/../node_modules/react-native/android")
        }
        maven {
            // Android JSC is installed from npm
            url("$rootDir/../node_modules/jsc-android/dist")
        }
        maven { url 'https://jitpack.io' }
    }
}

subprojects {
  task listAllDependencies(type: DependencyReportTask) {}
  ext {
    compileSdk = 28
    buildTools = "28.0.3"
    minSdk = 19
    targetSdk = 28
  }

  afterEvaluate { project ->
    if (!project.name.equalsIgnoreCase("app")
      && project.hasProperty("android")) {
      android {
        compileSdkVersion compileSdk
        buildToolsVersion buildTools
        defaultConfig {
          minSdkVersion minSdk
          targetSdkVersion targetSdk
        }
        variantFilter { variant ->
          def names = variant.flavors*.name
          if (names.contains("minReactNative44")) {
            setIgnore(true)
          }
          if (names.contains("reactNative51") || names.contains("reactNative55") || names.contains("reactNative56") || names.contains("reactNative57") || names.contains("reactNative57_5") || names.contains("reactNative57WixFork")) {
            setIgnore(true)
          }
        }
      }
    }
  }
}

